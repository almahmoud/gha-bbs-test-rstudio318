name: Build packages matrix
on:
  workflow_dispatch:
    inputs:
      concurrent:
        description: "Max number of jobs to concurrently run to pick up lists"
        default: "10"
      perjob:
        description: "Max number of packages to build in each job before reporting back"
        default: "15"
  push:
    paths:
      - tobuild.txt
      - packages.json
  schedule:
    - cron: '*/30 * * * *'

jobs:
  getlistformatrix:
    env:
      concurrentjobs: ${{ github.event.inputs.concurrent || '10' }}
      packagesperjob: ${{ github.event.inputs.perjob || '15' }}
    concurrency:
      group: dispatch
      cancel-in-progress: false
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.dispatchlists }}
      time: ${{ steps.uniq.outputs.time }}
    steps:
      - uses: actions/checkout@v4

      - name: Get timestamp for list
        id: uniq
        run: |
          echo "time=$(TZ=EST date '+%Y-%m-%d_%H-%M')" >> $GITHUB_OUTPUT

      - name: Initialize to build list
        id: claim
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 20
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git config user.name github-actions
            git config user.email github-actions@github.com
            git pull origin main || git reset --hard origin/main
            bash .github/scripts/list_tobuild.sh

      - name: Output list of up to 90 packages to build
        id: matrix
        run: |
          mkdir -p /tmp
          head -n$(($concurrentjobs*$packagesperjob)) tobuild.txt > /tmp/pkglist
          split -l $packagesperjob --numeric-suffixes /tmp/pkglist /tmp/dispatchlists
          ls /tmp/dispatchlists* | xargs -r -i basename {} > /tmp/alllists
          # Output it as json parsable list "['pkgs1', 'pkgs2']"
          echo dispatchlists=$(echo "['$(cat /tmp/alllists |  paste -d, -s | sed s/,/\',\'/g)']") >> $GITHUB_OUTPUT
          # Remove lines from to build
          sed "1,$(($concurrentjobs*$packagesperjob))d" tobuild.txt > /tmp/newtobuild

      - name: Set token depending on whether a new workflow is needed
        id: tokenlist
        run: |
          # PAT will trigger a push workflow, GITHUB_TOKEN won't
          # Trigger a new workflow if tobuild is not empty
          [ -s /tmp/newtobuild ] || [ -s /tmp/write_PACKAGES ] || [ -s /tmp/self-hosted ] && TOK=${{secrets.PAT}} || TOK=${{secrets.PAT}}
          echo tok=$(echo "$TOK") >> $GITHUB_OUTPUT

      - name: Checkout with new token
        uses: actions/checkout@v4
        with:
          token: ${{ steps.tokenlist.outputs.tok }}
          persist-credentials: true

      - name: Switch to self-hosted
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            if [ ! -s /tmp/self-hosted ]; then exit 0; fi
            grep -q 'waycarbon/github-action-container-cleanup@v1$' .github/workflows/run.yaml && exit 0 || true
            sed -i 's/runs-on: ubuntu-latest/runs-on: [self-hosted, js2]/g' .github/workflows/run.yaml
            sed -i '/steps:$/a \ \ \ \ \ \ - uses: waycarbon/github-action-container-cleanup@v1' .github/workflows/run.yaml
            cp /tmp/self-hosted lists/self-hosted
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .github/workflows/run.yaml
            git add lists
            git commit -m "Switch to self-hosted"
            git push

      - name: Add write_packages log
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            if [ ! -s /tmp/write_PACKAGES ]; then exit 0; fi
            cp /tmp/write_PACKAGES lists/write_PACKAGES
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add logs
            git add lists
            git commit -m "Updating write_packages to trigger"
            git push

      - name: Exit if list is empty divide up otherwise
        run: |
          # Exit if this run's package dispatch list is empty
          if [ ! -s /tmp/pkglist ]; then exit 1; fi


      - name: Update list
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x
            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            cp /tmp/newtobuild tobuild.txt
            mkdir -p logs/$(cat runstarttime)/logs/dispatchlists
            mkdir -p lists
            cat /tmp/alllists | xargs -r -i cp /tmp/{} logs/$(cat runstarttime)/logs/dispatchlists/${{ steps.uniq.outputs.time }}_{}
            cat /tmp/pkglist | xargs -r -i sed -i 's/readytobuild/claimed/g' "lists/{}"
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add lists
            git add logs/$(cat runstarttime)
            git add tobuild.txt
            git commit -m "Updating tobuild list"
            git push

  build:
    needs: getlistformatrix
    strategy:
      fail-fast: false
      matrix:
        dispatchlist: ${{fromJson(needs.getlistformatrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    steps:

      # - name: Free root space
      #   uses: almahmoud/free-root-space@main
      #   with:
      #     verbose: true

      - uses: actions/checkout@v4

      - name: Get R, OS, and Bioc versions
        id: versions
        run: |
          echo "Free space:"
          df -h
          echo os=$(cat bioc_build/os) >> $GITHUB_OUTPUT
          echo r=$(cat bioc_build/r) >> $GITHUB_OUTPUT
          echo bioc=$(cat bioc_build/bioc) >> $GITHUB_OUTPUT
          echo library=$(echo "/tmp/built") >> $GITHUB_OUTPUT
          echo platform=$(cat platform) >> $GITHUB_OUTPUT
          echo sanitizedplatform=$(cat platform | sed "s/[^[:alnum:]]/-/g") >> $GITHUB_OUTPUT
          echo arch=$(cat arch) >> $GITHUB_OUTPUT
          echo runstart=$(cat runstarttime) >> $GITHUB_OUTPUT
          echo dispatchlistpath=$(echo "${{github.workspace}}/logs/$(cat runstarttime)/logs/dispatchlists/${{needs.getlistformatrix.outputs.time }}_${{matrix.dispatchlist}}") >> $GITHUB_OUTPUT

      - name: Get Current Job Log URL
        uses: Tiryoh/gha-jobid-action@v0
        continue-on-error: true
        id: jobs
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: build (${{matrix.dispatchlist}})
          per_page: 100

      - name: Push run_id
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            set -x

            DISPATCHPATH=${{steps.versions.outputs.dispatchlistpath}}

            mkdir -p /tmp/tempscripts
            cat << "EOF" > /tmp/tempscripts/record_runids.sh
            PKG="$1"
            sed -i 's/claimed/building/g' "lists/$PKG"
            echo "${{ steps.jobs.outputs.html_url }}" >> logs/$(cat runstarttime)/$(cat containername)/$(cat arch)/run_ids/$PKG
            # Also add workflow URL as backup, in case above failed
            echo "${{ github.repository }}/actions/runs/${{ github.run_id }}" >> logs/$(cat runstarttime)/$(cat containername)/$(cat arch)/run_ids/$PKG
            EOF

            git config --global --add safe.directory "$GITHUB_WORKSPACE"
            git pull origin main || git reset --hard origin/main
            git config user.name github-actions
            git config user.email github-actions@github.com

            mkdir -p logs/$(cat runstarttime)/$(cat containername)/$(cat arch)/run_ids

            cat $DISPATCHPATH | xargs -r -i bash /tmp/tempscripts/record_runids.sh {}

            git add logs/$(cat runstarttime)
            git commit -m "Push run_id for ${{needs.getlistformatrix.outputs.time }}_${{matrix.dispatchlist}}"
            git push

      - name: Get deps list
        id: deps
        run: |
          DISPATCHPATH=${{steps.versions.outputs.dispatchlistpath}}

          mkdir -p /tmp/tempscripts
          cat << "EOF" > /tmp/tempscripts/get_deps.sh
          PKG="$1"
          sed -n "/^    \"$PKG\"/,/^    \"/p" biocdeps.json | grep '^        "' | awk -F'"' '{print $2}' > /tmp/biocdeps_$PKG
          cat /tmp/biocdeps_$PKG >> /tmp/allcurrdeps
          EOF

          cat $DISPATCHPATH | xargs -r -i bash /tmp/tempscripts/get_deps.sh {}

          echo dispatchpkgs=$(echo "'$(cat $DISPATCHPATH | paste -d, -s | sed s/,/\',\'/g)'") >> $GITHUB_OUTPUT

          ALLDEPSCACHE=""
          if [ -s /tmp/allcurrdeps ]; then 
            ALLDEPSCACHE=$(echo "'${{steps.versions.outputs.runstart}}-$(cat /tmp/allcurrdeps | sort | uniq | paste -d, -s | sed s/,/\',\'${{steps.versions.outputs.runstart}}-/g)'")
          fi
          echo alldepscache=$ALLDEPSCACHE >> $GITHUB_OUTPUT

          mkdir -p ${{steps.versions.outputs.library}}

      - uses: almahmoud/multi-cache-restore-action@outputs
        if: steps.deps.outputs.alldepscache != ''
        id: cache
        name: Multi-cache
        with:
          keys: "${{steps.deps.outputs.alldepscache}}"
          paths: "'${{steps.versions.outputs.library}}'"

      - name: Get list for artifacts (that failed cache)
        if: steps.deps.outputs.deplist != ''
        id: artdeps
        run: |
          set -x
          DEPLIST=$(echo "${{steps.deps.outputs.alldepscache}}" | tr -d "'" | tr ',' '\n')
          DEPREMOVE=$(echo "${{steps.cache.outputs.restored-list}}" | tr ',' '\n')
          DIFFLIST=$(comm -23 <(echo "$DEPLIST" | sort) <(echo "$DEPREMOVE" | sort) | tr '\n' ',' | sed 's/,*$//g')
          if [[ $DIFFLIST == *','* ]]; then DIFFLIST="{${DIFFLIST}}"; fi

          echo difflist=$DIFFLIST >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        if: steps.deps.outputs.deplist != '' && steps.artdeps.outputs.difflist != ''
        with:
          pattern: "${{steps.artdeps.outputs.difflist}}"
          path: "${{steps.versions.outputs.library}}"
          merge-multiple: 'true'

      - name: Start container and build packages
        id: pkgbuild
        shell: bash
        run: |
          set -x
          DISPATCHPATH=${{steps.versions.outputs.dispatchlistpath}}

          ls ${{steps.versions.outputs.library}}/ | grep 'tar.gz$' | xargs -r -i bash -c "tar -xvf ${{steps.versions.outputs.library}}/{} ${{steps.versions.outputs.library}}/$(echo '{}' | sed 's/.tar.gz//g') && rm ${{steps.versions.outputs.library}}/{}"

          # Prepare libraries for each package and add the restored dep libraries
          mkdir -p /tmp/tempscripts
          cat << "EOF" > /tmp/tempscripts/prepare_libraries.sh
          PKG="$1"
          mkdir -p ${{steps.versions.outputs.library}}/$PKG
          cat /tmp/biocdeps_$PKG | xargs -r -i cp -r ${{steps.versions.outputs.library}}/{}/* ${{steps.versions.outputs.library}}/$PKG/
          cat /tmp/biocdeps_$PKG >> /tmp/allcurrdeps
          EOF

          cat $DISPATCHPATH | xargs -r -i bash /tmp/tempscripts/prepare_libraries.sh {}

          # Remove libraries from outside, as they were copied into each of the to build package libraries
          (cd ${{steps.versions.outputs.library}} && ls > /tmp/allLibraries && comm -23 <(sort /tmp/allLibraries) <(sort $DISPATCHPATH) | xargs -r -i rm -r {})

          mkdir -p /tmp/results
          cat << "EOF" > /tmp/tempscripts/run_build.sh
          PKG="$1"
          CONT_ID="$2"
          docker exec $CONT_ID bash ${{github.workspace}}/.github/scripts/build_package.sh "$PKG" "${{steps.versions.outputs.library}}/$PKG" "${{github.workspace}}" && echo "GHABBSBUILDPASSED" > /tmp/results/$PKG || echo "GHABBSBUILDFAILED" > /tmp/results/$PKG
          EOF

          CONT_ID=$(docker run -d --user root -v ${{github.workspace}}:${{github.workspace}} -v /tmp:/tmp ghcr.io/bioconductor/bioconductor:3.18 sleep 21600)
          echo contid=$CONT_ID >> $GITHUB_OUTPUT

          cat $DISPATCHPATH | xargs -r -i bash /tmp/tempscripts/run_build.sh "{}" "$CONT_ID"

          if (ls /tmp/tars | grep -q "^${{matrix.pkg}}_"); then exit 0; else exit 1; fi
        continue-on-error: true

      - name: Set tar name
        id: tar
        run: |
          set -x
          echo pkg=$(ls /tmp/tars/ | grep "^${{matrix.pkg}}_" | sed 's#/tmp/tars/##g') >> $GITHUB_OUTPUT
          ls ${{steps.versions.outputs.library}}/ | grep -v 'tar.gz' | xargs -r -i bash -c "tar -zcvf ${{steps.versions.outputs.library}}/{}.tar.gz ${{steps.versions.outputs.library}}/{}"

      - name: Push failed packages
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            grep -rl "GHABBSBUILDFAILED" /tmp/results > /tmp/results/allfailed
            if [ -s /tmp/results/allfailed ]; then
              git pull origin main || git reset --hard origin/main
              git config user.name github-actions
              git config user.email github-actions@github.com

              mkdir -p lists/failed
              cat /tmp/results/allfailed | xargs -r -i bash -c "cp /tmp/pkglogs/{} lists/failed/{} && echo 'failed' > lists/{}"

              git add lists
              git commit -m "Marked failed pkgs ${{needs.getlistformatrix.outputs.time }}_${{matrix.dispatchlist}}"
              git push
            fi

      - uses: almahmoud/multi-cache-restore-action@multi-save
        id: save
        name: Multi-save cache + artifact
        with:
          key-prefix: "${{steps.versions.outputs.runstart}}"
          path-prefix: "${{steps.versions.outputs.library}}"
          input-list: "${{steps.deps.outputs.dispatchpkgs}}"

      - name: Install rclone & add rclone conf file
        uses: nick-fields/retry@v3
        env:
            RCLONE_CONF: ${{secrets.RCLONE_CONF}}
        with:
          timeout_minutes: 20
          max_attempts: 10
          shell: bash
          command: |
            set -xe
            curl https://rclone.org/install.sh | sudo bash || true
            echo "$RCLONE_CONF" > ~/.rclone.conf
            if ! command -v rclone &> /dev/null
            then
                echo "rclone could not be found"
                exit 1;
            fi

      - name: Rclone push package
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 20
          max_attempts: 3
          shell: bash
          command: |
            set -x
            # Push binaries
            ls /tmp/tars/ | sed 's#/tmp/tars/##g' | xargs -r -i rclone copy /tmp/tars/{} js2:/gha-build/$(cat containername)/$(cat arch)/$(cat runstarttime)/binaries/src/contrib/ -vvvvvv

      - name: Set token depending on whether a new workflow is needed
        id: tokenbuilt
        run: |
          # PAT will trigger a push workflow, GITHUB_TOKEN won't
          # Trigger a new workflow if any package has reverse dependencies (and no comma, ie other dependencies)
          mkdir -p /tmp/tempscripts
          touch /tmp/endretrigger
          cat << "EOF" > /tmp/tempscripts/token_set.sh
          PKG="$1"
          if grep -q "        \"$PKG\"$" packages.json; then echo 'yes' > /tmp/endretrigger; fi
          EOF

          if [ -s /tmp/endretrigger ]; then TOK=${{secrets.PAT}}; else TOK=${{secrets.GITHUB_TOKEN}}; fi
          echo tok=$(echo "$TOK") >> $GITHUB_OUTPUT

      - name: Checkout with token
        uses: actions/checkout@v4
        with:
          token: ${{ steps.tokenbuilt.outputs.tok }}
          persist-credentials: true

      - name: Rclone mark as pushed
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 50
          shell: bash
          command: |
            grep -rl "GHABBSBUILDPASSED" /tmp/results > /tmp/results/allpassed
            if [ -s /tmp/results/allpassed ]; then
              git pull origin main || git reset --hard origin/main
              git config user.name github-actions
              git config user.email github-actions@github.com

              ls /tmp/tars/ | sed 's#/tmp/tars/##g' | awk -F'_' '{print $1}' | xargs -r -i bash -c 'bash .github/scripts/mark_done.sh {} packages.json && ls /tmp/tars/ | sed "s#/tmp/tars/##g" | grep "^{}_" > lists/{}'

              git add lists
              git commit -m "Marked successful pkgs ${{needs.getlistformatrix.outputs.time }}_${{matrix.dispatchlist}}"
              git push
            fi
